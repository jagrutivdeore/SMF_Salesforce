@RestResource(UrlMapping ='/MapParameters/*')
global class LatLonParameters_WS 
{
    @HttpPost
    global static void doPost() 
    {
        String id,lat,lon;
        
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String jsonBody = req.requestBody.toString();
        jsonResponse jResp = new jsonResponse();
        Map<String, Object> body = new Map<String, Object>();
        try
        {
            body = (Map<String, Object>)JSON.deserializeUntyped(jsonBody);
            system.debug('body:-'+body);
            if(!body.containsKey('id'))
            {
                jResp.status = 'failure';
                jResp.msg = 'Please Provide User ID';
                res.responseBody = Blob.valueOf(json.serialize(jResp));
            }
            else if(!body.containsKey('lat'))
            {
                jResp.status = 'failure';
                jResp.msg = 'Please Provide Lattitude';
                res.responseBody = Blob.valueOf(json.serialize(jResp));
            }
            else if(!body.containsKey('lon'))
            {
                jResp.status = 'failure';
                jResp.msg = 'Please Provide Longitude';
                res.responseBody = Blob.valueOf(json.serialize(jResp));
            }    
            else
            {
                id = (String)body.get('id');
                lat =(String)body.get('lat');
                lon = (String)body.get('lon');
                
                
                MV_User__c user = new MV_User__c();
                user = [SELECT User_Location__c,Last_Seen__c FROM MV_User__c WHERE ID =: id];
                user.User_Location__Latitude__s = Decimal.valueOf(lat);
                user.User_Location__Longitude__s = Decimal.valueOf(lon);
      
                //DateTime dt = System.Now();
                //String strConvertedDate = dt.format('dd/mm/yyyy HH:mm:ss','America/New_York');
                user.Last_Seen__c = System.Now();
                
                user.Formatted_Last_Seen__c = System.Now().format();
                update user;
                
                jResp.status = 'Success';
                jResp.msg = 'Longitude and Lattitude is succesfully mapped.';
                res.responseBody = Blob.valueOf(json.serialize(jResp));
            }
        }catch(Exception e)
        {
            jResp.status = 'failure';
            jResp.msg = e.getMessage();
            res.responseBody = Blob.valueOf(json.serialize(jResp));
        }
    }
    public class jsonResponse
    {
        String status;
        string msg;
    }
    
    public static void testCode() {
         Integer i =0;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
    
    }
}