@RestResource(urlMapping='/WS_getProcessAprovalUserNew/*')
global class WS_getProcessAprovalUserNew {
 @HttpGet
    global static List<userData> doGet() {

    RestRequest req = RestContext.request;
    RestResponse res = RestContext.response;
    String processId = RestContext.request.params.get('processId');
    String UserId = RestContext.request.params.get('UserId');
    MV_User__c user = new MV_User__c();
    List<userData> userDataList = new List<userData>();
    user = [select id,Role_Name__c,User_District__c,User_Taluka__c,User_State__c from MV_User__c where Id = :UserId];
    List<MV_Process__c> prcList = new List<MV_Process__c>();
    prcList = [select id from MV_Process__c where id = :processId];
    //List<Task_Answer__c> tskList = new List<Task_Answer__c>();
    List<ProcessAnswer__c> tskList = new List<ProcessAnswer__c>();
    set<Id> prcIdset = new set<Id>();
    for(MV_Process__c prc : prcList){
        prcIdset.add(prc.Id);
        
    }
    
    
    
    if((user.User_District__c == 'select' || user.User_District__c == '' || user.User_District__c == null ) && (user.User_Taluka__c == 'select' || user.User_Taluka__c == null || user.User_Taluka__c == '')){
            tskList = [select id,MV_User__c from ProcessAnswer__c where MV_Process__c IN :prcIdset AND (State__c = :user.User_State__c) AND (Process_Answer_Status__c = 'Pending' or Process_Answer_Status__c = 'Rejected')];
        
        set<Id> userIdList = new set<Id>();
        for(ProcessAnswer__c ta : tskList){
            userIdList.add(ta.MV_User__c);
        }
        List<MV_User__c> userList = new List<MV_User__c>();
        userList = [select id,Name,Last_Name__c from MV_User__c where id IN :userIdList];
        for(MV_User__c user1 : userList){
            userData ud = new userData();
            ud.username = user1.Name +' '+user1.Last_Name__c;
            ud.Id = user1.Id;
            userDataList.add(ud);
        }
    }else {
        tskList = [select id,MV_User__c from ProcessAnswer__c where MV_Process__c IN :prcIdset AND (District__c = :user.User_District__c OR Taluka__c = :user.User_Taluka__c) AND (Process_Answer_Status__c = 'Pending' or Process_Answer_Status__c = 'Rejected')];
        
        set<Id> userIdList = new set<Id>();
        for(ProcessAnswer__c ta : tskList){
            userIdList.add(ta.MV_User__c);
            }
        List<MV_User__c> userList = new List<MV_User__c>();
        userList = [select id,Name,Last_Name__c from MV_User__c where id IN :userIdList];
        for(MV_User__c user2 : userList){
            userData ud = new userData();
            if(user2.Name != null && user2.Name != ''){
                ud.username = user2.Name +' ';
            }
            if(user2.Last_Name__c != null && user2.Last_Name__c !=''){
                ud.username = ud.username +user2.Last_Name__c;
            }
            
            ud.Id = user2.Id;
            userDataList.add(ud);
            }
        }
        return userDataList;
    }
    

    global class userData{
        string username;
        string Id;
    }
    
     public static void testCode() {
         Integer i =0;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         
         
           i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
            i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
         i++;
       
         }
    }